-- COMPRAS DIRECTAS (STD) E INBOUND PAYMENTS (IN) [PRE]
CREATE OR REPLACE TABLE `meli-bi-data.EXPLOTACION.STAGING_COUPON_PAYMENTS_STD_IN_PRE`
CLUSTER BY SIT_SITE_ID,ORD_ORDER_ID
AS (
    SELECT DATE(PAY_CREATED_DTTM) PAY_CREATED_DT,
        PAY_PURCHASE_FLAG PAYMENT_TYPE,
        SIT_SITE_ID,
        PAY_PAYMENT_ID,
        CUS_CUST_ID_SEL,
        CUS_CUST_ID_BUY,
        ORD_ORDER_ID,
        CAST(CHARGE.CAMPAIGN_ID AS INT64) AS MKT_CAMPAIGN_TOKEN_ID,
        CHARGE.MELI_CAMPAIGN_ID AS PROMOTIONS_CAMPAIGN_ID,
        CHARGE.COUPON_ID AS COUPON_ID,
        CHARGE.NAME AS COUPON_NAME,
        CHARGE.ORIGINAL_AMOUNT AS COUPON_ORIGINAL_AMOUNT,
        CHARGE.REFUNDED_AMOUNT AS COUPON_REFUNDED_AMOUNT,
        CASE WHEN PAY_PURCHASE_FLAG = 'STD' THEN COALESCE(CHARGE.ITE_ITEM_ID, CHARGE.ITE_ITEMS_GROUP[SAFE_OFFSET(0)].ITE_ITEM_ID) ELSE CHARGE.ITE_ITEM_ID END ITE_ITEM_ID,
        CASE WHEN PAY_PURCHASE_FLAG = 'STD' THEN COALESCE(CHARGE.ITE_ITEM_VARIATION, CHARGE.ITE_ITEMS_GROUP[SAFE_OFFSET(0)].ITE_ITEM_VARIATION) ELSE CHARGE.ITE_ITEM_VARIATION END ITE_ITEM_VARIATION,
        CHARGE.ITE_ITEMS_GROUP AS ITE_ITEM_GROUP,
        PAY_SPLITTER_ID
    FROM `meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENT_COUPONS`
    INNER JOIN UNNEST(PAY_COUPON_CHARGE_DETAILS) AS CHARGE
    WHERE PAY_PURCHASE_FLAG IN ('STD','IN')
        AND COUPON_ID IS NOT NULL
        --AND PAY_REASON_ID = 'marketplace_order' ---> CHEQUEAR QUE EL CAMPO LLEGA CON CUALQUIER COSA!!
        AND IS_TEST = FALSE
--        AND CHARGE.NAME = 'coupon_%'
        AND PAY_APPROVED_DTTM IS NOT NULL
);
-- COMPRAS DIRECTAS (STD) E INBOUND PAYMENTS (IN)
CREATE OR REPLACE TABLE `meli-bi-data.EXPLOTACION.STAGING_COUPON_PAYMENTS_STD_IN`
CLUSTER BY PAY_SPLITTER_ID
AS (
    SELECT PAY_CREATED_DT,
        PAYMENT_TYPE,
        P.SIT_SITE_ID,
        PAY_PAYMENT_ID,
        P.ORD_ORDER_ID,
        MKT_CAMPAIGN_TOKEN_ID,
        PROMOTIONS_CAMPAIGN_ID,
        COUPON_ID,
        COUPON_NAME,
        COUPON_ORIGINAL_AMOUNT,
        COUPON_REFUNDED_AMOUNT,
        ITE_ITEM_GROUP,
        P.ITE_ITEM_ID,
        P.ITE_ITEM_VARIATION,
        PAY_SPLITTER_ID,
        O.ORD_STATUS,
        O.ORD_CLOSED_DT,
        O.ORD_ITEM.QTY,
        O.ORD_ITEM.UNIT_PRICE,
        O.ORD_ITEM.QTY * O.ORD_ITEM.UNIT_PRICE as TOTAL_AMOUNT,
        O.ORD_SELLER.ID CUS_CUST_ID_SEL,
        O.ORD_SELLER.PARTY_TYPE_ID
    FROM `meli-bi-data.EXPLOTACION.STAGING_COUPON_PAYMENTS_STD_IN_PRE` P 
    LEFT JOIN `meli-bi-data.WHOWNER.BT_ORD_ORDERS` o
        ON P.SIT_SITE_ID = o.SIT_SITE_ID
            AND P.ORD_ORDER_ID = o.ORD_ORDER_ID
            AND ORD_CLOSED_DTTM >= '2021-01-01'
            AND P.PAYMENT_TYPE = 'STD'
);
-- OUTBOUNT PAYMENTS (OUT) [PRE]
CREATE OR REPLACE TABLE `meli-bi-data.EXPLOTACION.STAGING_COUPON_PAYMENTS_OUT_PRE`
CLUSTER BY SIT_SITE_ID,ORD_ORDER_ID
AS (
    SELECT PAY_PAYMENT_ID,
        SIT_SITE_ID,
        ORD_ORDER_ID,
        PAY_SPLITTER_ID
    FROM `meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENT_COUPONS` P
    WHERE PAY_PURCHASE_FLAG = 'OUT'
        AND PAY_APPROVED_DTTM IS NOT NULL
        AND IS_TEST = FALSE
        AND PAY_SPLITTER_ID IN (SELECT PAY_SPLITTER_ID FROM `meli-bi-data.EXPLOTACION.STAGING_COUPON_PAYMENTS_STD_IN`)
);
-- OUTBOUNT PAYMENTS (OUT)
CREATE OR REPLACE TABLE `meli-bi-data.EXPLOTACION.STAGING_COUPON_PAYMENTS_OUT`
CLUSTER BY PAY_SPLITTER_ID
AS (
    SELECT PAY_PAYMENT_ID,
        P.ORD_ORDER_ID,
        PAY_SPLITTER_ID,
        o.SIT_SITE_ID,
        O.ITE_ITEM_ID,
        ORD_ITEM.VARIATION_ID ITE_ITEM_VARIATION,
        O.ORD_STATUS,
        O.ORD_CLOSED_DT,
        O.ORD_ITEM.QTY,
        O.ORD_ITEM.UNIT_PRICE,
        O.ORD_ITEM.QTY * O.ORD_ITEM.UNIT_PRICE as TOTAL_AMOUNT,
        O.ORD_SELLER.ID CUS_CUST_ID_SEL,
        O.ORD_SELLER.PARTY_TYPE_ID
    FROM `meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENT_COUPONS` P
    JOIN `meli-bi-data.WHOWNER.BT_ORD_ORDERS` o
        ON P.SIT_SITE_ID = o.SIT_SITE_ID
            and P.ORD_ORDER_ID = o.ORD_ORDER_ID
    WHERE ORD_CLOSED_DTTM >= '2021-01-01'
);
-- TABLA FINAL - BT_MKP_COUPON
CREATE OR REPLACE TABLE `meli-bi-data.EXPLOTACION.BT_MKT_COUPON`
CLUSTER BY COUPON_ID
AS (
    SELECT COUPON_ID,
        COUPON_NAME,
        SIT_SITE_ID,
        COUPON_ORIGINAL_AMOUNT,
        COUPON_REFUNDED_AMOUNT,
        MKT_CAMPAIGN_TOKEN_ID,
        PROMOTIONS_CAMPAIGN_ID,
        PAY_PAYMENT_ID,
        PAYMENT_TYPE,
        PAY_CREATED_DT,
        PAY_SPLITTER_ID,
        ARRAY_AGG(OUT_PAYMENT_ID IGNORE NULLS) OUTBOUND_PAYMENTS,
        ARRAY_AGG(STRUCT(
            ORD_ORDER_ID,
            ITEM_ID,
            ITEM_VARIATION,
            ORD_STATUS,
            ORD_CLOSED_DT,
            CUS_CUST_ID_SEL,
            PARTY_TYPE_ID,
            QTY,
            UNIT_PRICE,
            TOTAL_AMOUNT,
            COU_ORD_ORIGINAL_AMOUNT,
            COU_ORD_REFUNDED_AMOUNT,
            COU_SHARE)) ORDERS
    FROM (
        SELECT C.COUPON_ID,
            C.COUPON_NAME,
            C.SIT_SITE_ID,
            C.COUPON_ORIGINAL_AMOUNT,
            C.COUPON_REFUNDED_AMOUNT,
            C.MKT_CAMPAIGN_TOKEN_ID,
            C.PROMOTIONS_CAMPAIGN_ID,
            C.PAY_PAYMENT_ID,
            C.PAYMENT_TYPE,
            C.PAY_CREATED_DT,
            C.PAY_SPLITTER_ID,
            --OUTBOUND_PAYMENTS
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN NULL ELSE P.PAY_PAYMENT_ID END OUT_PAYMENT_ID,
            --ORDERS
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.ORD_ORDER_ID ELSE P.ORD_ORDER_ID END ORD_ORDER_ID,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.ITE_ITEM_ID ELSE P.ITE_ITEM_ID END ITEM_ID,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.ITE_ITEM_VARIATION ELSE P.ITE_ITEM_VARIATION END ITEM_VARIATION,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.ORD_STATUS ELSE P.ORD_STATUS END ORD_STATUS,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.ORD_CLOSED_DT ELSE P.ORD_CLOSED_DT END ORD_CLOSED_DT,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.CUS_CUST_ID_SEL ELSE P.CUS_CUST_ID_SEL END CUS_CUST_ID_SEL,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.PARTY_TYPE_ID ELSE P.PARTY_TYPE_ID END PARTY_TYPE_ID,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.QTY ELSE P.QTY END QTY,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.UNIT_PRICE ELSE P.UNIT_PRICE END UNIT_PRICE,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.TOTAL_AMOUNT ELSE P.TOTAL_AMOUNT END TOTAL_AMOUNT,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.COUPON_ORIGINAL_AMOUNT ELSE SAFE_DIVIDE(COUPON_ORIGINAL_AMOUNT * SUM(P.TOTAL_AMOUNT) , SUM(SUM(P.TOTAL_AMOUNT)) OVER (PARTITION BY COUPON_ID)) END COU_ORD_ORIGINAL_AMOUNT,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN C.COUPON_REFUNDED_AMOUNT ELSE SAFE_DIVIDE(COUPON_REFUNDED_AMOUNT * SUM(P.TOTAL_AMOUNT) , SUM(SUM(P.TOTAL_AMOUNT)) OVER (PARTITION BY COUPON_ID)) END COU_ORD_REFUNDED_AMOUNT,
            CASE WHEN C.PAYMENT_TYPE = 'STD' THEN 1 ELSE SUM(P.TOTAL_AMOUNT) / SUM(SUM(P.TOTAL_AMOUNT)) OVER (PARTITION BY COUPON_ID) END COU_SHARE,
        FROM `meli-bi-data.EXPLOTACION.STAGING_COUPON_PAYMENTS_STD_IN` C
        LEFT JOIN `meli-bi-data.EXPLOTACION.STAGING_COUPON_PAYMENTS_OUT` P
            ON P.PAY_SPLITTER_ID = C.PAY_SPLITTER_ID
        LEFT JOIN UNNEST(C.ITE_ITEM_GROUP) I
        WHERE C.PAYMENT_TYPE = 'STD'
            OR ((P.ITE_ITEM_ID = I.ITE_ITEM_ID AND IFNULL(P.ITE_ITEM_VARIATION,0) = IFNULL(I.ITE_ITEM_VARIATION,0))
                OR (P.ITE_ITEM_ID = C.ITE_ITEM_ID AND IFNULL(P.ITE_ITEM_VARIATION,0) = IFNULL(C.ITE_ITEM_VARIATION,0)))
        GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22
    )
    GROUP BY 1,2,3,4,5,6,7,8,9,10,11
);
